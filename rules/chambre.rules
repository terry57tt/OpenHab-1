val TAG_FileName = "chambre.rules"

rule "Démarrage de openHAB"
when
    System started
then
    logInfo(TAG_FileName, "Rule : Démarrage de openHAB")
    // il n'y a personne dans la pièce et l'éclairage est fermé
    chambre.postUpdate(OFF)
    detecteur_mvt_plafond.postUpdate(OFF)
    ampoule_plafonnier.postUpdate(OFF)
end

rule "reset simulation"
when
    Item simulation received update
then
    logInfo(TAG_FileName, "Rule : reset simulation")
    detecteur_mvt_plafond.postUpdate(OFF)
    chambre.postUpdate(OFF)
    ampoule_plafonnier.postUpdate(OFF)
end

rule "Allumer la lumière si conditions remplies"
when
    Item detecteur_mvt_plafond changed to ON or
    Item day_light changed
then
    if (chambre.state == ON && lit.state == OFF && day_light.state < 30) {
        logInfo(TAG_FileName, "Rule : Allumer lumière - Conditions remplies")
        ampoule_plafonnier.sendCommand(ON)
    }
end

rule "Éteindre la lumière s'il n'y a personne"
when
    Item detecteur_mvt_plafond changed to OFF
then
    logInfo(TAG_FileName, "Rule : Éteindre lumière - Personne dans la pièce")
    ampoule_plafonnier.sendCommand(OFF)
end

rule "Éteindre la lumière après 15 minutes d'inactivité dans le lit"
when
    Item lit changed to ON
then
    createTimer(now.plusMinutes(15), [|
        if (lit.state == ON && detecteur_mvt_plafond.state == OFF) {
            logInfo(TAG_FileName, "Rule : Éteindre lumière après 15 minutes d'inactivité")
            ampoule_plafonnier.sendCommand(OFF)
        }
    ])
end

rule "Rallumer la lumière quand la personne se lève"
when
    Item lit changed to OFF
then
    logInfo(TAG_FileName, "Rule : Rallumer lumière - Personne s'est levée")
    ampoule_plafonnier.sendCommand(ON)
end
